{
  "paragraphs": [
    {
      "text": "%md\nThe Structured APIs are a tool for manipulating all sorts of data, from unstructured log files to semi-structured CSV files and highly structured Parquet files. These APIs refer to three core types of distributed collection APIs\n- Datasets\n- DataFrames\n- SQL tables and views\n\nmajority of the Structured APIs apply to both batch and streaming computation. This means that when you work with the Structured APIs, it should be simple to migrate from batch to streaming (or vice versa) with little to no effort\n\nThe Structured APIs are the fundamental abstraction that you will use to write the majority of your data flows\n\nDataFrames and Datasets are (distributed) table-like collections with well-defined rows and columns.\n\n- To Spark, DataFrames and Datasets represent immutable, lazily evaluated plans that specify what operations to apply to data residing at a location to generate some output\n\n- When we perform an action on a DataFrame, we instruct Spark to perform the actual transformations and return the result. These represent plans of how to manipulate rows and columns to compute the user’s desired result.",
      "user": "anonymous",
      "dateUpdated": "Aug 5, 2018 2:15:45 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eThe Structured APIs are a tool for manipulating all sorts of data, from unstructured log files to semi-structured CSV files and highly structured Parquet files. These APIs refer to three core types of distributed collection APIs\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDatasets\u003c/li\u003e\n\u003cli\u003eDataFrames\u003c/li\u003e\n\u003cli\u003eSQL tables and views\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003emajority of the Structured APIs apply to both batch and streaming computation. This means that when you work with the Structured APIs, it should be simple to migrate from batch to streaming (or vice versa) with little to no effort\u003c/p\u003e\n\u003cp\u003eThe Structured APIs are the fundamental abstraction that you will use to write the majority of your data flows\u003c/p\u003e\n\u003cp\u003eDataFrames and Datasets are (distributed) table-like collections with well-defined rows and columns.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eTo Spark, DataFrames and Datasets represent immutable, lazily evaluated plans that specify what operations to apply to data residing at a location to generate some output\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhen we perform an action on a DataFrame, we instruct Spark to perform the actual transformations and return the result. These represent plans of how to manipulate rows and columns to compute the user’s desired result.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1533477972082_1237321597",
      "id": "20180805-140612_236552655",
      "dateCreated": "Aug 5, 2018 2:06:12 PM",
      "dateStarted": "Aug 5, 2018 2:15:45 PM",
      "dateFinished": "Aug 5, 2018 2:15:45 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Schemas\n\n- A schema defines the column names and types of a DataFrame. \n- You can define schemas manually or read a schema from a data source (often called schema on read). \n- Schemas consist of types, meaning that you need a way of specifying what lies where.\n\n### Structured Spark Types\n\n- Spark is effectively a programming language of its own. \n- Internally, Spark uses an engine called Catalyst that maintains its own type information through the planning and processing of work. \n- In doing so, this opens up a wide variety of execution optimizations that make significant differences.\n- Spark types map directly to the different language APIs that Spark maintains and there exists a lookup table for each of these in Scala, Java, Python, SQL, and R. \n- Even if we use Spark’s Structured APIs from Python or R, the majority of our manipulations will operate strictly on Spark types, not Python types.\n\n\n##### For example, the following code does not perform addition in Scala or Python; it actually performs addition purely in Spark",
      "user": "anonymous",
      "dateUpdated": "Aug 5, 2018 2:26:05 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003eSchemas\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eA schema defines the column names and types of a DataFrame.\u003c/li\u003e\n\u003cli\u003eYou can define schemas manually or read a schema from a data source (often called schema on read).\u003c/li\u003e\n\u003cli\u003eSchemas consist of types, meaning that you need a way of specifying what lies where.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStructured Spark Types\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSpark is effectively a programming language of its own.\u003c/li\u003e\n\u003cli\u003eInternally, Spark uses an engine called Catalyst that maintains its own type information through the planning and processing of work.\u003c/li\u003e\n\u003cli\u003eIn doing so, this opens up a wide variety of execution optimizations that make significant differences.\u003c/li\u003e\n\u003cli\u003eSpark types map directly to the different language APIs that Spark maintains and there exists a lookup table for each of these in Scala, Java, Python, SQL, and R.\u003c/li\u003e\n\u003cli\u003eEven if we use Spark’s Structured APIs from Python or R, the majority of our manipulations will operate strictly on Spark types, not Python types.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5\u003eFor example, the following code does not perform addition in Scala or Python; it actually performs addition purely in Spark\u003c/h5\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1533478061529_1975809623",
      "id": "20180805-140741_2118785956",
      "dateCreated": "Aug 5, 2018 2:07:41 PM",
      "dateStarted": "Aug 5, 2018 2:20:27 PM",
      "dateFinished": "Aug 5, 2018 2:20:27 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val df \u003d spark.range(1000).toDF(\"number\")\ndf.select(df.col(\"number\") + 10).take(2)",
      "user": "anonymous",
      "dateUpdated": "Aug 5, 2018 2:27:08 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "tableHide": true,
        "lineNumbers": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "df: org.apache.spark.sql.DataFrame \u003d [number: bigint]\nres11: Array[org.apache.spark.sql.Row] \u003d Array([10], [11])\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1533478820127_-1262383784",
      "id": "20180805-142020_746071309",
      "dateCreated": "Aug 5, 2018 2:20:20 PM",
      "dateStarted": "Aug 5, 2018 2:25:57 PM",
      "dateFinished": "Aug 5, 2018 2:25:59 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\ndf \u003d spark.range(500).toDF(\"number\")\ndf.select(df[\"number\"] + 10).take(2)",
      "user": "anonymous",
      "dateUpdated": "Aug 5, 2018 2:26:42 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[Row((number + 10)\u003d10), Row((number + 10)\u003d11)]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1533478893646_-803070218",
      "id": "20180805-142133_885484607",
      "dateCreated": "Aug 5, 2018 2:21:33 PM",
      "dateStarted": "Aug 5, 2018 2:26:42 PM",
      "dateFinished": "Aug 5, 2018 2:26:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nThis addition operation happens because Spark will convert an expression written in an input language to Spark’s internal Catalyst representation of that same type information. It then will operate on that internal representation\n",
      "user": "anonymous",
      "dateUpdated": "Aug 5, 2018 2:27:52 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eThis addition operation happens because Spark will convert an expression written in an input language to Spark’s internal Catalyst representation of that same type information. It then will operate on that internal representation\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1533479202219_1061683463",
      "id": "20180805-142642_1193531175",
      "dateCreated": "Aug 5, 2018 2:26:42 PM",
      "dateStarted": "Aug 5, 2018 2:27:52 PM",
      "dateFinished": "Aug 5, 2018 2:27:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### DataFrames\n- Dataframes are untyped API\u0027s.\n- To say that DataFrames are untyped is aslightly inaccurate; they have types, but Spark maintains them completely and only checks whether those types line up to those specified in the schema at runtime\n- when you’re using DataFrames, you’re taking advantage of Spark’s optimized internal format. This format applies the same efficiency gains to all of Spark’s language APIs\n\n### DataSets\n- check whether types conform to the specification at compile time.\n- Datasets are only available to Java Virtual Machine (JVM)–based languages (Scala and Java)\n- we specify types with case classes for scala or Java beans for java\n\nTo Spark (in Scala), DataFrames are simply Datasets of Type Row. \n\nThe “Row” type is Spark’s internal representation of its optimized in-memory format for computation. \n\nThis format makes for highly specialized and efficient computation because rather than using JVM types, which can cause high garbage-collection and object instantiation costs.\n\nSpark can operate on its own internal format without incurring any of those costs\n",
      "user": "anonymous",
      "dateUpdated": "Aug 5, 2018 2:33:37 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003eDataFrames\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDataframes are untyped API\u0027s.\u003c/li\u003e\n\u003cli\u003eTo say that DataFrames are untyped is aslightly inaccurate; they have types, but Spark maintains them completely and only checks whether those types line up to those specified in the schema at runtime\u003c/li\u003e\n\u003cli\u003ewhen you’re using DataFrames, you’re taking advantage of Spark’s optimized internal format. This format applies the same efficiency gains to all of Spark’s language APIs\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDataSets\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003echeck whether types conform to the specification at compile time.\u003c/li\u003e\n\u003cli\u003eDatasets are only available to Java Virtual Machine (JVM)–based languages (Scala and Java)\u003c/li\u003e\n\u003cli\u003ewe specify types with case classes for scala or Java beans for java\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo Spark (in Scala), DataFrames are simply Datasets of Type Row.\u003c/p\u003e\n\u003cp\u003eThe “Row” type is Spark’s internal representation of its optimized in-memory format for computation.\u003c/p\u003e\n\u003cp\u003eThis format makes for highly specialized and efficient computation because rather than using JVM types, which can cause high garbage-collection and object instantiation costs.\u003c/p\u003e\n\u003cp\u003eSpark can operate on its own internal format without incurring any of those costs\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1533479272924_1392056885",
      "id": "20180805-142752_1404998038",
      "dateCreated": "Aug 5, 2018 2:27:52 PM",
      "dateStarted": "Aug 5, 2018 2:33:37 PM",
      "dateFinished": "Aug 5, 2018 2:33:37 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "Aug 5, 2018 2:33:37 PM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1533479617248_205786249",
      "id": "20180805-143337_1780461336",
      "dateCreated": "Aug 5, 2018 2:33:37 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "spark-structured-api-overview",
  "id": "2DKGYUVMH",
  "angularObjects": {
    "2CHS8UYQQ:shared_process": [],
    "2C8A4SZ9T_livy2:shared_process": [],
    "2CK8A9MEG:shared_process": [],
    "2C4U48MY3_spark2:shared_process": [],
    "2CKAY1A8Y:shared_process": [],
    "2CKEKWY8Z:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}